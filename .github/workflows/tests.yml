name: Test example applications

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Cancel previous running actions for the same PR
  cancel_previous:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Workflow Action
        uses: styfle/cancel-workflow-action@0.11.0

  checks:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      # --- Update code ---
      - name: "Checkout code"
        uses: actions/checkout@v3
        with:
          submodules: true
      # --- Formatting ---
      - name: "Format code"
        run: ./bin/inv_wrapper.sh format-code --check

  build-examples:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    container:
      image: faasm.azurecr.io/examples-build:0.2.4_0.2.5
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: "Build FFmpeg"
        run: ./bin/inv_wrapper.sh ffmpeg
      - name: "Build ImageMagick"
        run: ./bin/inv_wrapper.sh libpng imagemagick
      - name: "Build Kernels"
        run: ./bin/inv_wrapper.sh kernels kernels --native
      - name: "Build LAMMPS"
        run: ./bin/inv_wrapper.sh lammps lammps --native
      - name: "Build Lulesh"
        run: ./bin/inv_wrapper.sh lulesh lulesh --native
      - name: "Build TensorFlow"
        run: ./bin/inv_wrapper.sh tensorflow
      - name: "Upload examples wasm"
        uses: actions/upload-artifact@v3.1.0
        with:
          name: examples-wasm
          path: /usr/local/faasm/wasm
      - name: "Copy WASM files to distribute as an artifact"
        run: ./bin/inv_wrapper.sh wasm
      - uses: actions/upload-artifact@v3
        with:
          name: examples-wasm
          path: ./wasm

  run-examples:
    if: github.event.pull_request.draft == false
    needs: [build-examples]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /usr/local/code/faasm
    env:
      CGROUP_MODE: off
      DEFAULT_MPI_WORLD_SIZE: 4
      HOST_TYPE: ci
      LOG_LEVEL: info
      NETNS_MODE: off
      OVERRIDE_CPU_COUNT: 30
      REDIS_QUEUE_HOST: redis
      REDIS_STATE_HOST: redis
    container:
      image: faasm.azurecr.io/examples-run:0.9.5
      credentials:
        username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
        password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
    services:
      redis:
        image: faasm.azurecr.io/redis:0.9.5
        credentials:
          username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
      minio:
        image: faasm.azurecr.io/minio:0.9.5
        credentials:
          username: ${{ secrets.ACR_SERVICE_PRINCIPAL_ID }}
          password: ${{ secrets.ACR_SERVICE_PRINCIPAL_PASSWORD }}
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
    steps:
      - name: "Download examples wasm"
        uses: actions/download-artifact@v3.0.1
        with:
          name: examples-wasm
          path: /usr/local/faasm/wasm
      - name: "Run codegen for all the examples"
        run: |
          ./bin/inv_wrapper.sh codegen.user kernels-mpi
          ./bin/inv_wrapper.sh codegen.user kernels-omp
          ./bin/inv_wrapper.sh codegen imagemagick main
          ./bin/inv_wrapper.sh codegen lammps main
          ./bin/inv_wrapper.sh codegen lulesh main
          ./bin/inv_wrapper.sh codegen ffmpeg check
          ./bin/inv_wrapper.sh codegen tf check
      - name: "Put all data files in place"
        run: ./bin/inv_wrapper.sh data
        working-directory: /code/examples
      - name: "Run MPI kernels"
        run: |
          # The global MPI kernel stopped working when enabling SIMD
          # ./bin/inv_wrapper.sh run.pool kernels-mpi global --cmdline '10 1024'
          ./bin/inv_wrapper.sh run.pool kernels-mpi p2p --cmdline '10 1024 1024'
          ./bin/inv_wrapper.sh run.pool kernels-mpi sparse --cmdline '10 10 5'
          ./bin/inv_wrapper.sh run.pool kernels-mpi transpose --cmdline '10 1024 32'
          ./bin/inv_wrapper.sh run.pool kernels-mpi stencil --cmdline '10 1000'
          # The dgemm MPI kernel does not work because we are missing
          # implementations for MPI_Comm_group, MPI_Group_incl, and MPI_Comm_create
          # ./bin/inv_wrapper.sh run.pool kernels-mpi dgemm --cmdline '10 1024 32 1'
          ./bin/inv_wrapper.sh run.pool kernels-mpi nstream --cmdline '10 1024 32'
          ./bin/inv_wrapper.sh run.pool kernels-mpi reduce --cmdline '10 1024'
          # The random MPI kernel does not work because we are missing
          # implementations for MPI_Alltoallv
          # ./bin/inv_wrapper.sh run.pool kernels-mpi random --cmdline '32 20'
      - name: "Run OpenMP kernels"
        run: |
          ./bin/inv_wrapper.sh run.pool kernels-omp global --cmdline '2 10 1024'
          ./bin/inv_wrapper.sh run.pool kernels-omp p2p --cmdline '2 10 1024 1024'
          # The sparse OpenMP kernel fails during the result integrity checks
          # ./bin/inv_wrapper.sh run.pool kernels-omp sparse --cmdline '2 10 10 5'
          # The transpose OpenMP kernel can not be cross-compiled due to problems
          # with the static_for signature and symbol definition
          # ./bin/inv_wrapper.sh run.pool kernels-omp transpose --cmdline '10 1024 32'
          # The stencil OpenMP kernel can not be cross-compiled due to a problem
          # with the faasm_sm_reduce signature
          # ./bin/inv_wrapper.sh run.pool kernels-omp stencil --cmdline '10 1000'
          ./bin/inv_wrapper.sh run.pool kernels-omp dgemm --cmdline '2 2 1024 32'
          ./bin/inv_wrapper.sh run.pool kernels-omp nstream --cmdline '2 10 1024 32'
          ./bin/inv_wrapper.sh run.pool kernels-omp reduce --cmdline '2 10 1024'
          # The random OpenMP kernel can not be cross-compiled due to a problem
          # with the faasm_sm_reduce signature
          # ./bin/inv_wrapper.sh run.pool kernels-omp random --cmdline '32 20'
      - name: "Run ImageMagick"
        run: ./bin/inv_wrapper.sh run imagemagick main --cmdline 'faasm://im/sample_image.png -flip faasm://im/image_out.png'
      - name: "Run LAMMPS"
        run: ./bin/inv_wrapper.sh run.pool lammps main --cmdline '-in faasm://lammps-data/in.controller.wall'
      - name: "Run LULESH"
        run: ./bin/inv_wrapper.sh run.pool lulesh main --cmdline '-i 5 -s 20 -r 11 -c 1 -b 1' --data '4'
      - name: "Run TFlite check"
        run: ./bin/inv_wrapper.sh run tf check
      - name: "Run FFmpeg check"
        run: ./bin/inv_wrapper.sh run ffmpeg check
